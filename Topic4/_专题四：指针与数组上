一.指针基础：
    1.指针本质也是一个变量，需要占用一定的内存空间，用于保存内存地址的值。
    2.不同数据类型的指针占用的内存是一样大的。（32位地址总线的是四字节，64位地址总线的是八字节）
    3.*号的意义：
        在指针声明时，*号表示所声明的变量位指针
        在指针使用时，*号表示取指针所指向的内存空间中的值
    4.如何通过地址直接访问到内存空间？
        例：*((int *)0x61FE14) = 100;
        其中最外面的*()整体的取地址值，(int *)是强制转换为一个int类型的指针，强制将后面的十六进制数转换为地址。
    5.传值调用（一般变量参数）与传址调用（指针变量参数）
        函数调用时将实参值复制到形参上。
        当一个函数体内部需要改变实参的值，则需要使用指针参数。
            （因为函数内部能直接访问改变的就是形参，如果是指针参数可以通过地址直接访问变量地址来改变变量值）
        指针适用于复杂数据类型作为参数的函数
        

二.数组基础
    1.数组概念：相同类型的变量的有序集合。
    2.数组名是数组里第一个元素的起始地址。
    3.数组名可以看作一个常量指针。
    4.在表达式中数组名只能作为右值。
    5.数组名其实不是指针，在外部声明时不能混淆。


三.数组与指针分析
    1.指针与整数的运算规则：
        p + n --> (unsigned int)p + n*sizeof(*p)
    2.指针之间只能进行减法运算，而且两个指针只能是同一个数组里的地址，结果是元素之间的下标差。
    3.指针也可以进行关系运算：< , <= , > ,>= 。
    4.指针关系运算的前提是同时指向同一数组中的元素。
    5.任意两个指针之间的比较运算(==,!=)无限制。
    6.访问数组元素的两种方法：
        以下标的形式访问数组中元素：
            int main()
            {
                int a[5];

                a[1] = 3;
                a[3] = 5;
                return 0 ;
            }

        以指针的形式访问数组中元素：
            int main()
            {
                int a[5];
                
                *(a+1) = 3;
                *(a+3) = 5;
                return 0 ;
            }
        这两种访问形式完全一样，但是在理论上说在定量递增递减时指针的效率更高一些，下标更易读。
    7.数组声明时编译器自动分配一片连续内存空间，指针声明时只分配了用于容纳指针的4字节空间
    8.在作为函数参数时，数组参数与指针参数等价


四.C语言中的字符串
    1.从概念上讲，c语言中没有字符串数据类型。
    2.在C语言中使用字符数组来模拟字符串，以'\0'结束字符数组
    3.字符串可以分配于栈空间，堆空间或只读存储区
    4.字符串的长度就是字符串所包含的字符的个数，C语言中字符串长度指的是第一个'\0'字符前出现的字符个数
    实现strcpy库函数4-2.c程序


