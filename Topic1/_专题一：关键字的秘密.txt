一.基本数据类型分析：
    1.sizeof是可以返回目标所占内存的大小
    2.sizeof不是函数而是一个操作符
    3.sizeof的作用对象可以是数据类型名也可以是变量名
    4.typedef的作用是改变自己定义数据类型的名称

二.auto,register,static分析：
    1. 属性关键字auto、static、register表明变量的属性。
    2. auto是c语言中局部变量的默认属性，默认所有的局部变量都是auto的。
    3. static指明变量存在静态区，还有作用域限定符的作用。static所修饰全局变量和函数的作用域只在声明的文件中。
    4. register指明变量存在寄存器中。（在寄存器中取用非常的快）
    5. 内存四区：栈区(参数值和局部变量)、堆区、全局区（常量区、静态变量和全局变量）、代码区。
    6. 局部变量是在栈上分配空间的。
    7. 因为不是存放在内存所以不能用“&”运算符获取register变量的地址。
    8. auto变量和register变量不能作为全局变量。
    9. 函数里的一般变量调用一次的过程就它的寿命，而静态变量的生命周期与程序相同。（存放在栈中的变量用一次就释放了）
    10.静态的局部变量只会被初始化一次。（运行后不再改变存储空间）（局部变量在赋值时都会在栈中再次自动分配内存空间）
    11.初始化指的就是在栈中自动分配内存空间。
    12.extern用法：extern 变量名（函数名），用处是“此变量（函数）在别处定义在此处引用”。（被引用时不能定义为静态变量）

三.if,switch,do,while,for分析：
    选择语句：
        if:
            1.当普通变量和0值进行比较时0值应该出现在比较符号左边。
            （这种编写习惯不容易出错，出错了也比较好找，因为变量名长短不一）
            （把简单的短的放在前面，把长的放在后面利于后续的检查错误）
            2.booler类型的变量应该直接出现在条件中，不要进行比较。
            3.float类型变量不能直接进行0值比较，需要定义精度。

        switch:
            4.case 语句中的值只能是整形或字符型。
            5.case 的排序分析：正常情况放前面，异常情况放后面。按字母或数字排列。default语句只用于处理真正的默认情况。

        if 和 switch 适用的不同情况：
            if适用“按片”进行判断。（是用是否满足条件来选择进行代码块）
            switch适用于对离散值进行分别判断。
            if是连续的全能的，switch是离散的。
            多分支判断用switch更加的简洁。

    循环语句：
        do{}while():
            先执行后判断。

        while(){}:
            先判断后执行。

        for:
            先判断后执行。

    break和continue的区别：
        break表示终止循环执行。
        continue表示终止本次循环体，进入下次循环。

    switch 能否用 continue？
        不能用，continue是为循环设计的。
        break的作用是跳出整个块。（块就是花括号括起来的部分）

    do break 的妙用：
        函数设计时的基本的三个步骤：
            1.分配资源（分配内存）。
            2.执行函数语句。
            3.释放资源退出函数。
        用do while 结构和break语句相配合就能做到统一地释放资源防止内存泄露。
        do while起到一个块的作用，将一部分整合在一起
        break的作用提前结束循环，防止多重执行

    内存泄漏（Memory Leak）是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统
    内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。

    为什么要考虑分配资源和释放资源？
        初学时我们大部分都用的栈区的内存（栈区存放函数参数值局部变量，由编译器自动分配释放资源），
        但是栈区的资源是有限的而且并不是内存的主要部分，堆区的内存比栈区的大很多，所以要尽量使用堆
        区，堆区是由程序员自己分配释放资源[动态内存申请(malloc)与释放(free)]，若是程序员不释放，在
        程序结束后可能由操作系统回收。

    至于堆区、栈区是啥请看专题一-二.5

四.goto,void,extern,sizeof分析：
    1.不推荐用goto语句，因为goto语句改变了程序的顺序执行地规则，而且有可能跳过一些关键地语句。
    2.函数没有返回值时就声明为void类型，没有参数时就声明参数为void。
    3.没有void变量，void理论上也没内存大小，但是在一些编译器上会规定，例如gcc上就是为1。
    4.void* 指针：作为被赋值方（左值）可以接收任意类型的指针，作为赋值方（右值）赋值给其他指针时需要进行强制类型转换。
    5.C语言规定只有相同类型指针才可以相互赋值。（此时就可以利用void指针的特性，来进行一些集中的全能的设置），此处可以
    看看4-void_text.c程序所作的示例.
    6.extern只有两种用法一是extern 引用的变量或函数，二是extern "C"引用标准c
    7.sizeof不是函数而是一个操作符。
    8.sizeof用于计算相应实体的所占的内存大小。
    9.sizeof的三种用法:
        int a ;
        sizeof(a),sizeof a,sizeof(数据类型)

五.coust和volatile分析：
    1. coust通常定义常量，coust修饰的变量是只读的，其本质还是变量，会在内存占用空间。（因此可以用指针来对coust变量进行处理）
    2. coust只对编译器有用，在运行时无用。（只能作为左值）
    3. 虽然coust修饰的变量只能作为左值但是可以用指针的方式来进行赋值。
    4. 老式编译器例如gcc是可以将改变的值输出，新式编译器则虽然可以修改值但是输出来还是原来的值。
    5. const修饰的数组也是只读的，不能被改变。（被改变会报错）
    6. const修饰指针：
         const int* p;        //p可变，p指向的内容不可变
         int const* p;        //p可变，p指向的内容不可变
         int* const p;        //p不可变，p指向的内容可变
         const int* const p;  //p和p指向的内容都不可变
                 口诀：左数右指
         当const出现在*号左边时指针指向的数据为常量。
         当const出现在*号右边时指针本身为常量。
    7. const修饰函数参数表示在函数体内不希望改变参数的值
    8. const修饰函数返回值表示返回值不可改变，多用于返回指针的情况。
    9. volatile可理解为“编译警告指示字”。
    10.volatile用于告诉编译器必须每次去内存中取变量值。
      （不同的编译器在编译时有时会进行一些优化，使得在变量赋值时有可能只从内存中取一次（如果没有当成左值），然后后续用时就直接第一次取得变量值）

六.struct和union（联合体）分析：
    1.空结构体的大小不同的编译器结果是不同的。（理论上应该是0但是为了防止不同变量的地址是相同的大部分设为1）
    2.柔性数组即数组大小待定的数组。
    3.struct中的，每个域在内存中都独立分配空间。
    4.union只分配最大域的空间，所有域共享这个空间。
    5.union只记录最后一次输入的值。
    6.union本质上可以看成一个能存放多种类型的数据的变量。
    7.union要考虑大小端问题，可以参考 https://blog.csdn.net/nyist_zxp/article/details/80801897 的讲解。