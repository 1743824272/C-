一.注释符号：
    1.编译器对注释的处理不是删除而是用空格代替   
    2.在字符串中将注释符号仅仅看成简单的字符
    3."\"可以作为//的换行符，可以注释下一行
    4.多行注释不能嵌套（这没打出来多行注释符号就是因为这个原因）
    5.优秀的注释用于阐述原因而不是用于描述程序的运行过程


二.接续符和转义符：
    1.接续符“\”的使用：编译器会将反斜杠剔除，跟在反斜杠后面的字符自动接到前一行
    2.接续符通常用于定义宏代码块（因为宏只能定义在一行以内，因此可以用接续符来分成多行，更具有可读性）
    3.转义符用于表示无回显字符也可用于表示常规字符。
            \n          回车换行
            \t          横向跳到下一制表位置
            \v          竖向跳格
            \b          退格
            \r          回车
            \f          走纸换页
            \\          反斜杠符"\"
            \'          单引号符
            \a          鸣铃
            \ddd        1~3位八进制数所代表的字符
            \xhh        1~2位十六进制数所代表的字符
    4.当反斜杠当作转义符使用时需出现在字符或字符串中


三.单引号和双引号：
    1.单引号表示字符常量，双引号表示字符串常量 
    2.将字符串赋值给一个字符时，字符串会自己生成一个地址这个地址时长于字符地址8位的所以只取后八位作为地址进行后续操作
    3.单引号括起来的一个字符代表整数（一个8位的二进制数128个字符ASCII表）
    4.双引号括起来的字符串代表一个指针（指向字符串的地址）


四.逻辑运算符使用分析：
    1.“||”与“&&”的短路规则：
        “||”运算符从左开始计算，因为只要有真表达式就是真，因此当遇到真时就停止运算
        “&&”运算符从左开始计算，因为只要有假表达式就是假，因此当遇到假时就停止运算
    2.逻辑符“!”只认得0，只知道见到0就返回1，如果不是0就返回0.
    3.三目运算符规则：当a的值为真是，返回b的值，否则返回a的值（注意此处是返回值而不是返回变量再从变量内存地址中取值）
    4.*(a < b ? &a : &b) = 3;的分析：
        &是取地址，*是取地址指向的值，此处先判断a小于b是否正确，如果是true则返回a的地址，如果是false则返回b的地址。
        然后再用*来找到对应的地址进行修改。
    

五.位运算符分析：
    1. &：按位与， |：按位或， ^：按位异或， ~：取反， <<：左移， <<：右移
    2. "&","|","^"满足结合律和交换律
    3.左移和右移注意点：
        左移运算符<<将运算数的二进制位左移；相当于乘以2的n次方
            高位丢弃，低位补0
        右移运算符>>将运算数的二进制位右移；相当于除以2的n次方
            高位补符号位，低位丢弃
            （若是不带符号数，则补入的数全部为0；若是带符号数，则补入的数全部等于原数的最左端位上的原数(即原符号位)）
    4.防错准则：防止位运算符，逻辑运算符和数学运算符同时出现在一个表达式中，如果必须要同时参与运算尽量使用括号来表达计算次序。
    5.三种交换两个变量的方法（参考专题二-5-1）
    6.位运算符有非常多可操作的空间，好好使用对实现更好的算法有极大的帮助。（可参考5-1example）
   
    
六.++与--操作符使用分析：
    1.++与--操作符在c语言中是灰色地带，规则只规定了++是+1，--是-1，但是对于（++i）+（++i）+（++i）这种没有定义，
      不同的编译器处理方式也有可能不同。实在是不明白可以看看专题二-6-(1:40~4:10)对此的解释
    （因为实在是太多了全写在这里显得太冗余，我尽量避免对视频的引用）
    2.++、--与逗号表达式：
        逗号表达式：从左到右顺序求值，最后一个表达式的值，就是逗号表达式的值。
        用逗号表达式可以将++、--中的定义不再模糊变得明确。
    3.编译器在处理代码时用贪心法（从左到右一个一个尽可能多的读入字符直到不可能和已读入字符组成合法的符号为止）,
      可以看6-1的实际案例来辅助理解。
    4.可以多使用空格来防止编译器使用贪心法带来的错误。


七.优先级和类型转换分析：
    1. 赋值符优先级比“==”、“!=”优先级低。
    
    2. ()[]优先级高于*。
        表达式          经常误认为的结果            实际结果
        //ap 是个指向int数组的指针-------------------ap是个元素为int 指针的数组
        int *ap[]       int (*ap)[]                 int *(ap[])
        //fp是个函数指针，所指函数返回int------------fp是个函数，返回int*
        int *fp()       int (*fp)()                 int *(fp())

    3. .的优先级高于*。
        表达式          经常误认为的结果            实际结果
        *p.f            (*p).f                      *(p.f)
    
    4. 算数运算符高于位运算符。
        表达式          经常误认为的结果            实际结果
        a<<4+b          (a<<4)+b                    a<<(4+b)
    
    5. 逗号运算符的优先级最低。

    隐式类型转换：
        算术运算符中，低类型转换为高类型
        赋值运算符中，表达式的值转换为左边变量的类型
        函数调用时，实参转换为形参的类型
        函数返回值，return表达式转换为返回值类型